
/*
 * DO NOT MODIFY THIS CLASS
 */

public class Account {
	
	private String username;
	private int hasedPassword;	// avoid keeping plain text password
	private int loginFail;
	public static int FAIL_ATTEMPT_LIMIT = 1; // set the default limit

	/*
	 * note: To simply secure the password, we use hasCode() to 
	 * return integer value generated by a hashing algorithm.
	 * However, you should not use this in real word applications
	 * because this technique can be easily decrypted.
	 */
	public Account(String u, String p){
		this.username = u;
		this.hasedPassword = p.hashCode();
		this.loginFail = 0;
	}
	
	/*
	 * setter and getter methods
	 */
	public void setPassword(String pwd){
		this.hasedPassword = pwd.hashCode();
	}
	
	public void setLoginFail(int n){
		this.loginFail = n;
	}
	
	public String getUsername(){
		return username;
	}
	
	public int getPassword(){
		return hasedPassword;
	}
	
	public int getLoginFail(){
		return loginFail;
	}
	
	/*
	 * If the password is correct, reset loginFail to 0 and return true.
	 * Otherwise, increase loginFail by one and 
	 * if the loginFail is more than the fail attempt limit, display a warning message
	 */
	public boolean authentication(String pwd){
		if(this.hasedPassword == pwd.hashCode()){
			loginFail = 0;
			return true;
		} else{
			loginFail++;
			if(loginFail > FAIL_ATTEMPT_LIMIT){
				System.out.println("WARNING: " + username + " too many failed login attempts");
			}
			return false;
		}
	}
	
	/*
	 * override -> java.lang.Object#toString() method
	 */
	public String toString(){
		return username + ":" + hasedPassword;
	}
	
	/*
	 * Compare between given account and this account
	 * Returns true, if both username and hasedPassword are the same
	 * Otherwise, returns false.
	 */
	public boolean isEquals(Account acc){
		if(acc == null)
			return false;
		else
			return (username == acc.getUsername()) && (hasedPassword == acc.getPassword());
	}
}
